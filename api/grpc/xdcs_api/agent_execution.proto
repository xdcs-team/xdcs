syntax = "proto3";

option java_multiple_files = true;
option java_package = "pl.edu.agh.xdcs.api";

package xdcs.agent;

import "xdcs_api/common.proto";
import "google/protobuf/timestamp.proto";

message TaskSubmit {
    string deploymentId = 1;
    string taskId = 2;
    AgentVariables agentVariables = 3;
    KernelConfig kernelConfig = 4;

    message AgentVariables {
        /**
         * Table containing IPs of all agents executing this task.
         */
        repeated string agentIps = 1;

        /**
         * String IP address of agent.
         */
        string agentIpMine = 2;

        /**
         * Id of the agent - only for execution of this task.
         */
        uint32 agentId = 3;

        /**
         * Number of agents executing this task.
         */
        uint32 agentCount = 4;
    }
}

message KernelConfig {
    /**
     * List containing object references of kernelArgument values
     */
    repeated string kernelArguments = 1;

    /**
     * List containing global work shape in format: '[dim1,dim2,dim3]'
     */
    repeated uint32 globalWorkShape = 2;

    /**
     * List containing local work group shape in format: '[dim1,dim2,dim3]'
     */
    repeated uint32 localWorkShape = 3;
}

message MergeSubmit {
    string deploymentId = 1;
    string taskId = 2;
    string originTaskId = 3;
    repeated string artifactTrees = 4;
}

message TaskResultReport {
    string taskId = 1;
    string artifactTree = 2;
    Result result = 3;

    enum Result {
        FAILED = 0;
        SUCCEEDED = 1;
    }
}

message Logs {
    string taskId = 1;
    repeated LogLine lines = 2;

    message LogLine {
        google.protobuf.Timestamp timestamp = 1;
        LogType type = 2;
        bytes contents = 3;
    }

    enum LogType {
        INTERNAL = 0;
        STDOUT = 1;
        STDERR = 2;
    }
}

service TaskRunner {
    rpc Submit (TaskSubmit) returns (OkResponse) {

    }

    rpc Merge (MergeSubmit) returns (OkResponse) {

    }
}

service TaskReporting {
    rpc UploadLogs (Logs) returns (OkResponse) {

    }

    rpc ReportTaskResult (TaskResultReport) returns (OkResponse) {

    }
}
