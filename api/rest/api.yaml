openapi: 3.0.0

info:
  title: XDCS REST API
  version: 0.1.0-SNAPSHOT

servers:
  - url: http://127.0.0.1:32080/xdcs/rest
    description: Local server run with docker-compose

paths:
  /nodes:
    get:
      tags:
        - Nodes
      operationId: getNodes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDto'

  /nodes/{nodeId}:
    get:
      tags:
        - Nodes
      operationId: getNode
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDto'

  /task-definitions:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinitions
      parameters:
        - in: query
          name: from
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 0
            default: 20
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDefinitionsDto'
    post:
      tags:
        - Task Definitions
      operationId: createTaskDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDefinitionDto'
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Address of the newly created resource
              schema:
                type: string

  /task-definitions/{taskDefinitionId}:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinition
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDefinitionDto'

  /task-definitions/{taskDefinitionId}/workspace:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinitionWorkspaceFile
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDto'
    put:
      tags:
        - Task Definitions
      operationId: setTaskDefinitionWorkspaceFile
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDto'
      responses:
        200:
          description: OK

    delete:
      tags:
        - Task Definitions
      operationId: deleteTaskDefinitionWorkspaceFile
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK

  /task-definitions/{taskDefinitionId}/workspace/content:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinitionWorkspaceFileContent
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
        - Task Definitions
      operationId: setTaskDefinitionWorkspaceFileContent
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          description: OK

  /task-definitions/{taskDefinitionId}/deployments:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinitionDeployments
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDescriptorsDto'

  /task-definitions/{taskDefinitionId}/configuration:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinitionConfiguration
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentConfigDto'
    put:
      tags:
        - Task Definitions
      operationId: setTaskDefinitionConfiguration
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentConfigDto'
      responses:
        204:
          description: OK

  /deployments:
    post:
      tags:
        - Deployments
      operationId: deployTaskDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentRequestDto'
      responses:
        201:
          description: OK

  /deployments/{deploymentId}:
    get:
      tags:
        - Deployments
      operationId: getDeployment
      parameters:
        - in: path
          name: deploymentId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDto'

  /deployments/{deploymentId}/workspace:
    get:
      tags:
        - Deployments
      operationId: getDeploymentFile
      parameters:
        - in: path
          name: deploymentId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDto'

  /deployments/{deploymentId}/workspace/content:
    get:
      tags:
        - Deployments
      operationId: getDeploymentFileContent
      parameters:
        - in: path
          name: deploymentId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary

  /tasks:
    get:
      tags:
        - Tasks
      operationId: getTasks
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksDto'
    post:
      tags:
        - Tasks
      operationId: startTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreationDto'
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Location of the newly created task
              schema:
                type: string

  /tasks/{taskId}:
    get:
      tags:
        - Tasks
      operationId: getTask
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'

  /tasks/{taskId}/conditions:
    get:
      tags:
        - Tasks
      operationId: getTaskConditions
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskConditionsDto'

  /tasks/{taskId}/logs:
    get:
      tags:
        - Log Handling
      operationId: getTaskLogs
      parameters:
        - in: path
          name: taskId
          required: true
          schema:
            type: string
        - in: query
          name: from
          required: false
          schema:
            type: string
            format: 'date-time'
          description: Return logs logged after the specified time (inclusive)
        - in: query
          name: to
          required: false
          schema:
            type: string
            format: 'date-time'
          description: Return logs logged before the specified time (inclusive)
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsDto'

components:
  schemas:
    NodesDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/NodeDto'

    NodeDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        status:
          type: string
          enum:
            - offline
            - unavailable
            - ready
            - busy

    TaskDefinitionDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        config:
          $ref: '#/components/schemas/DeploymentConfigDto'

    TaskDefinitionsDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TaskDefinitionDto'
        from:
          type: integer
        total:
          type: integer

    DeploymentDescriptorDto:
      type: object
      properties:
        id:
          type: string
        taskDefinitionId:
          type: string
        description:
          type: string
        timeDeployed:
          type: string
          format: 'date-time'

    DeploymentDto:
      type: object
      properties:
        id:
          type: string
        taskDefinitionId:
          type: string
        description:
          type: string
        timeDeployed:
          type: string
          format: 'date-time'
        config:
          $ref: '#/components/schemas/DeploymentConfigDto'

    DeploymentDescriptorsDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DeploymentDescriptorDto'
        from:
          type: integer
        total:
          type: integer

    FileType:
      type: string
      enum: [regular, directory, link]

    FileDto:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/FileType'
        permissions:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/FileEntryDto'
      required:
        - type

    FileEntryDto:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: string
        type:
          $ref: '#/components/schemas/FileType'
      required:
        - name
        - type
        - permissions

    DeploymentConfigDto:
      type: object
      properties:
        type:
          type: string
          enum:
            - opencl
            - cuda
            - docker
            - script

        # Docker
        dockerfile:
          type: string

        # Script
        scriptfile:
          type: string

        # Kernel
        kernelfile:
          type: string
        kernelname:
          type: string
        kernelparams:
          type: array
          items:
            $ref: '#/components/schemas/KernelParamDto'

    KernelParamDto:
      type: object
      properties:
        name:
          type: string
        direction:
          type: string
          enum:
            - in
            - out
            - inout
        type:
          type: string
          enum:
            - simple
            - pointer

    DeploymentRequestDto:
      type: object
      properties:
        from:
          type: string
        description:
          type: string

    LinksDto:
      type: object
      additionalProperties:
        type: string

    TasksDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TaskDto'
        from:
          type: integer
        total:
          type: integer

    TaskDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        deploymentId:
          type: string
        timeCreated:
          type: string
          format: 'date-time'
        state:
          type: string
          enum:
            - queued
            - in_progress
            - finished
            - canceled
            - errored
        links:
          $ref: '#/components/schemas/LinksDto'

    TaskCreationDto:
      type: object
      properties:
        deploymentId:
          type: string
        name:
          type: string
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceDto'

    ResourceDto:
      type: object
      properties:
        agent:
          type: string
        key:
          type: string
        type:
          type: string
          enum:
            - cpu
            - cuda
            - opencl
        quantity:
          type: integer
      required:
        - agent
        - key
        - type
        - quantity

    TaskConditionsDto:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceDto'

    LogsDto:
      type: object
      properties:
        websocketUrl:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/LogDto'
      required:
        - items
        - websocketUrl

    LogDto:
      type: object
      properties:
        time:
          type: string
          format: 'date-time'
        type:
          type: string
          enum:
            - int
            - out
            - err
        contents:
          type: string
          format: byte
      required:
        - time
        - type
        - contents
