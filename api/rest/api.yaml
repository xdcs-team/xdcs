openapi: 3.0.0

info:
  title: XDCS REST API
  version: 0.1.0-SNAPSHOT

paths:
  /nodes:
    get:
      tags:
        - Nodes
      operationId: getNodes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesDto'

  /nodes/{nodeId}:
    get:
      tags:
        - Nodes
      operationId: getNode
      parameters:
        - in: path
          name: nodeId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDto'

  /task-definitions:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinitions
      parameters:
        - in: query
          name: from
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            minimum: 0
            default: 20
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDefinitionsDto'
    post:
      tags:
        - Task Definitions
      operationId: createTaskDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDefinitionDto'
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Address of the newly created resource
              schema:
                type: string

  /task-definitions/{taskDefinitionId}:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinition
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDefinitionDto'

  /task-definitions/{taskDefinitionId}/workspace:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinitionWorkspaceFile
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDto'
    put:
      tags:
        - Task Definitions
      operationId: setTaskDefinitionWorkspaceFile
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDto'
      responses:
        200:
          description: OK

    delete:
      tags:
        - Task Definitions
      operationId: deleteTaskDefinitionWorkspaceFile
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK

  /task-definitions/{taskDefinitionId}/workspace/content:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinitionWorkspaceFileContent
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
        - Task Definitions
      operationId: setTaskDefinitionWorkspaceFileContent
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          description: OK

  /task-definitions/{taskDefinitionId}/configuration:
    get:
      tags:
        - Task Definitions
      operationId: getTaskDefinitionConfiguration
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDefinitionConfigDto'
    put:
      tags:
        - Task Definitions
      operationId: setTaskDefinitionConfiguration
      parameters:
        - in: path
          name: taskDefinitionId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDefinitionConfigDto'
      responses:
        204:
          description: OK

  /deployments:
    post:
      tags:
        - Deployments
      operationId: deployTaskDefinition
      parameters:
        - in: query
          name: from
          description: Task definition ID which should be deployed
          required: true
          schema:
            type: string
      responses:
        201:
          description: OK

  /deployments/{deploymentId}:
    get:
      tags:
        - Deployments
      operationId: getDeployment
      parameters:
        - in: path
          name: deploymentId
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentDto'

  /deployments/{deploymentId}/workspace:
    get:
      tags:
        - Deployments
      operationId: getDeploymentFile
      parameters:
        - in: path
          name: deploymentId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDto'

  /deployments/{deploymentId}/workspace/content:
    get:
      tags:
        - Deployments
      operationId: getDeploymentFileContent
      parameters:
        - in: path
          name: deploymentId
          required: true
          schema:
            type: string
        - in: query
          name: path
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary


components:
  schemas:
    NodesDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/NodeDto'

    NodeDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        status:
          type: string
          enum:
            - offline
            - unavailable
            - ready
            - busy

    TaskDefinitionDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        config:
          $ref: '#/components/schemas/TaskDefinitionConfigDto'

    TaskDefinitionsDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TaskDefinitionDto'
        from:
          type: integer
        total:
          type: integer

    DeploymentDto:
      type: object
      properties:
        taskDefinitionId:
          type: string
        parent:
          type: string
        root:
          type: string

    FileType:
      type: string
      enum: [regular, directory, link]

    FileDto:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/FileType'
        permissions:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/FileEntryDto'
      required:
        - type
        - permissions

    FileEntryDto:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: string
        type:
          $ref: '#/components/schemas/FileType'
      required:
        - name
        - type
        - permissions

    TaskDefinitionConfigDto:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - opencl
            - cuda
            - docker
            - script

        # Docker
        dockerfile:
          type: string

        # Script
        scriptfile:
          type: string

        # Kernel
        kernelfile:
          type: string
        kernelname:
          type: string
        kernelparams:
          type: array
          items:
            $ref: '#/components/schemas/KernelParamDto'

    KernelParamDto:
      type: object
      properties:
        name:
          type: string
        direction:
          type: string
          enum:
            - in
            - out
            - inout
        type:
          type: string
          enum:
            - simple
            - pointer
